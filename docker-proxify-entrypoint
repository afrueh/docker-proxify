#!/bin/bash

# create proxied group
groupadd socksified

# setup redsocks and iptables rules
docker-proxify-daemon --http_proxy=${http_proxy} --https_proxy=${https_proxy} \
                      --socks4_proxy=${socks4_proxy} --socks5_proxy=${socks5_proxy} \
                      $(test -n "${port_spec}" && echo "--port_spec=${port_spec}")

# add a local route if requested (to avoid docker choosing it for the bridge)
# N.B. should also make sure this is skipped in redsocks
if [ -n "${local_net}" ]
then
    route=$(ip route get ${local_net} | head -n 1 | cut -d" " -f2- )
    echo "Adding explicit route for ${local_net}: ${route}"
    ip route add ${local_net} ${route}
fi

# setup docker daemon
docker-in-docker-setup

# start docker daemon
nohup dockerd > /var/log/docker.out 2> /var/log/docker.err &
dockerpid=$!

# wait for docker.err to log 'acceptconnections() = OK'
docker_ready=""
echo -n "Waiting for docker daemon to be ready."
while test -z "${docker_ready}" 
do
    # docker hasn't reported that it is ready yet, check if it has exited
    grep -q exit /var/log/docker.err && echo " docker daemon has exited!" && echo "docker log:" && cat /var/log/docker.err && exit 1

    echo -n "."
    sleep 0.05 || sleep 1
    docker_ready=$(grep 'API listen on /var/run/docker.sock' /var/log/docker.err)
done
echo " docker ready."

# launch requested command
sh -c "$*"
